name: CI

on:
  - push
  - pull_request

jobs:
  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        charm: [server]

    steps:
    - uses: actions/checkout@v2
    - run: sudo apt update
    - run: sudo apt install tox
    - run: tox -e ${{ matrix.charm }}

  deploy:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Check out repo
      uses: actions/checkout@v2

    - uses: balchua/microk8s-actions@v0.2.2
      with:
        channel: '1.20/stable'
        addons: '["dns", "storage", "rbac", "metallb:10.64.140.43-10.64.140.49"]'

    - name: Install dependencies
      run: |
        set -eux
        sudo snap install charm --classic
        sudo snap install juju --classic
        sudo snap install juju-bundle --classic
        sudo snap install juju-wait --classic
        sudo snap install charmcraft --classic --channel latest/candidate
        sudo apt update
        sudo apt install -y firefox-geckodriver tox

    # Avoid race condition with storage taking a long time to initialize
    - name: Wait for storage
      run: |
        sg microk8s -c 'microk8s kubectl rollout status deployment/hostpath-provisioner -n kube-system'

    - name: Bootstrap
      run: |
        set -eux
        sg microk8s -c 'juju bootstrap microk8s uk8s'
        juju add-model mlflow

    - name: Deploy charm dependencies
      timeout-minutes: 15
      run: |
        set -eux
        juju model-config update-status-hook-interval=15s
        juju deploy cs:istio
        juju config istio-pilot default-gateway=kubeflow-gateway
        sleep 10
        kubectl patch role -n mlflow istio-ingressgateway-operator -p '{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"name":"istio-ingressgateway-operator"},"rules":[{"apiGroups":["*"],"resources":["*"],"verbs":["*"]}]}'
        juju wait -wvt 300
        juju model-config update-status-hook-interval=5m

        # https://bugs.launchpad.net/juju/+bug/1921739
        (i=600; while ! juju wait -wvt 30 ; do ((--i)) || exit; sleep 1; done)

    - name: Deploy MLflow
      run: |
        set -eux
        sg microk8s -c 'juju bundle deploy --build --destructive-mode'
        juju relate mlflow-server istio-pilot
        juju wait -wvt 300

    - name: Test MLflow
      run: sg microk8s -c 'tox -e selenium'

    - run: kubectl get all -A
      if: failure()

    - run: kubectl get virtualservices -A
      if: failure()

    - run: juju status
      if: failure()

    - name: Get mlflow workload logs
      run: kubectl logs --tail 100 -nmlflow -lapp.kubernetes.io/name=mlflow-server
      if: failure()

    - name: Get mlflow operator logs
      run: kubectl logs --tail 100 -nmlflow -loperator.juju.is/name=mlflow-server
      if: failure()

    - name: Generate inspect tarball
      run: >
        sg microk8s <<EOF
          microk8s inspect | \
          grep -Po "Report tarball is at \K.+" | \
          xargs -I {} cp {} inspection-report-${{ strategy.job-index }}.tar.gz
        EOF
      if: failure()

    - name: Upload inspect tarball
      uses: actions/upload-artifact@v2
      with:
        name: inspection-reports
        path: ./inspection-report-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Upload selenium screenshots
      uses: actions/upload-artifact@v2
      with:
        name: selenium-screenshots
        path: /tmp/selenium-*.png
      if: failure()

    - name: Upload HAR logs
      uses: actions/upload-artifact@v2
      with:
        name: selenium-har
        path: /tmp/selenium-*.har
      if: failure()
