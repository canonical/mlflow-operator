# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[flake8]
max-line-length = 100

[tox]
skipsdist = True
skip_missing_interpreters = True
envlist = fmt, lint, unit, integration

[vars]
all_path = {[vars]src_path} {[vars]tst_path}
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/

[testenv]
passenv = 
	PYTHONPATH
	CHARM_BUILD_DIR
	MODEL_SETTINGS
	KUBECONFIG
setenv = 
	PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
	PYTHONBREAKPOINT=ipdb.set_trace
	PY_COLORS=1
deps = 
	poetry>=2.1.3

[testenv:update-requirements]
commands = 
	# updating all groups' locked dependencies:
	poetry lock --regenerate
description = Update requirements
skip_install = true

[testenv:fmt]
commands = 
	isort {[vars]all_path}
	black {[vars]all_path}
description = Apply coding style standards to code
commands_pre = 
	poetry install --only fmt
skip_install = true

[testenv:lint]
commands = 
	# uncomment the following line if this charm owns a lib
	# codespell {[vars]lib_path}
	codespell {toxinidir}/. --skip {toxinidir}/./.git --skip {toxinidir}/./.tox \
	--skip {toxinidir}/./build --skip {toxinidir}/./lib --skip {toxinidir}/./venv \
	--skip {toxinidir}/./.mypy_cache \
	--skip {toxinidir}/./icon.svg --skip *.json.tmpl \
	--skip *.lock
	# pflake8 wrapper supports config from pyproject.toml
	pflake8 {[vars]all_path}
	isort --check-only --diff {[vars]all_path}
	black --check --diff {[vars]all_path}
description = Check code against coding style standards
commands_pre = 
	poetry install --only lint,fmt
skip_install = true

[testenv:unit]
commands = 
	coverage run --source={[vars]src_path} \
	-m pytest --ignore={[vars]tst_path}integration -vv --tb native {posargs}
	coverage report
	coverage xml
description = Run unit tests
commands_pre = 
	poetry install --only unit,charm
skip_install = true

[testenv:integration]
commands = 
	pytest -v --tb native --asyncio-mode=auto {[vars]tst_path}integration/test_deploy_runners.py --keep-models --log-cli-level=INFO -s {posargs}
	pytest -v --tb native --asyncio-mode=auto {[vars]tst_path}integration/test_charm.py --log-cli-level=INFO -s {posargs}
description = Run integration tests
commands_pre = 
	poetry install --only integration
skip_install = true

[testenv:aws-integration]
commands = 
	pytest -v --tb native --asyncio-mode=auto {[vars]tst_path}integration/test_deploy_aws.py --keep-models --log-cli-level=INFO -s {posargs}
	pytest -v --tb native --asyncio-mode=auto {[vars]tst_path}integration/test_charm.py --log-cli-level=INFO -s {posargs}
description = Run integration tests
commands_pre = 
	poetry install --only integration
skip_install = true

[testenv:bundle-test]
commands = 
	pytest -v --tb native --asyncio-mode=auto {[vars]tst_path}integration/test_bundle.py --keep-models --log-cli-level=INFO -s {posargs}
description = Run bundle test
commands_pre = 
	poetry install --only integration
skip_install = true

[testenv:tflint]
allowlist_externals = 
	tflint
commands = 
	tflint --chdir=terraform --recursive
description = Check Terraform code against coding style standards

[testenv:test_bundle_deployment-{2.22,latest}]
commands = 
	pytest -v --tb native --asyncio-mode=auto {[vars]tst_path}/integration/test_bundle_deployment.py --keep-models --log-cli-level=INFO -s {posargs}
setenv = 
	2.22: BUNDLE_PATH = "./releases/2.22/stable/mlflow/bundle.yaml"
	2.22: KUBEFLOW_CHANNEL = 1.10/stable
	2.22: RESOURCE_DISPATCHER_CHANNEL = 2.0/stable
	latest: BUNDLE_PATH = "./releases/latest/edge/mlflow/bundle.yaml"
	latest: KUBEFLOW_CHANNEL = 1.10/stable
	latest: RESOURCE_DISPATCHER_CHANNEL = 2.0/stable
description = Test bundle deployment
commands_pre = 
	poetry install --only integration
skip_install = true
